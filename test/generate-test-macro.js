import fs from "fs";
import {Uf} from "5etools-utils";
import path from "path";
import {DIST_SUBDIR_MODULE} from "../script/consts.js";

class TestMacroGenerator {
	static _SCRIPTS_EXTERNAL = [
		`https://raw.githubusercontent.com/5etools-mirror-3/5etools-src/refs/heads/main/js/parser.js`,
		`https://raw.githubusercontent.com/5etools-mirror-3/5etools-src/refs/heads/main/js/utils.js`,
		`https://raw.githubusercontent.com/5etools-mirror-3/5etools-src/refs/heads/main/js/hist.js`,
	];

	static async pInit () {
		if (!process.env.IS_ALLOW_EXTERNAL_LOAD) {
			console.error(`This script loads and executes the following external scripts:\n${this._SCRIPTS_EXTERNAL.join("\n")}\n\nIf you're okay with that, re-run with the \`IS_ALLOW_EXTERNAL_LOAD=1\` environment variable set.`);
			process.exit(1);
		}

		for (const script of this._SCRIPTS_EXTERNAL) {
			console.warn(`Importing script: ${script}`);
			// eslint-disable-next-line no-eval
			eval(await (await fetch(script)).text());
		}
	}

	static run () {
		const lookup = {};

		Uf.listJsonFiles(
			path.join(DIST_SUBDIR_MODULE, "data"),
			{
				dirBlocklist: new Set(["_generated"]),
			},
		)
			.forEach(file => {
				const json = Uf.readJsonSync(file);
				Object.entries(json)
					.forEach(([prop, arr]) => {
						if (!(arr instanceof Array)) return;
						if (!arr.length) return;

						lookup[prop] ||= [];
						arr
							.forEach(ent => lookup[prop].push(ent));
					});
			});

		const ptMacroToImportLookupPopulate = Object.entries(lookup)
			.map(([prop, entMetas]) => {
				const ptInitProp = `toImportLookup["${prop}"] ||= [];`;
				const ptEntMetas = entMetas
					.map(entMeta => `toImportLookup["${prop}"].push({page: "${prop}", source: "${entMeta.source}", hash: "${UrlUtil.URL_TO_HASH_BUILDER[prop](entMeta)}"});`)
					.join("\n");
				return [ptInitProp, ptEntMetas].join("\n");
			})
			.join("\n\n");

		const macroText = `/* eslint-disable */
(async () => {
/**
 * Create a test actor, and import all internal automations.
 *
 * Generated by \`plutonium-addon-automation/test/generate-test-macro.js\`.
 */
 
const api = game.modules.get("plutonium").api;
		
const actor = await Actor.create({name: "Addon Automation Test", type: "character"});

const toImportLookup = {};

${ptMacroToImportLookupPopulate}

for (const [prop, entMetas] of Object.entries(toImportLookup)) {
	const importer = await api.importer.pGetImporter({prop, actor});
	await importer.pInit();

	for (const entMeta of entMetas) {
		const ent = await DataLoader.pCacheAndGet(entMeta.page, entMeta.source, entMeta.hash);
		if (!ent) {
			ui.notifications.warn(\`Could not find entity: page=\${entMeta.page} source=\${entMeta.source} hash=\${entMeta.hash}\`);
			continue;
		}
		await importer.pImportEntry(ent, new api.importer.ImportOpts({actor}));
	}
}
})()`;

		console.log(`Generated macro text:\n==========\n\n`);
		console.log(macroText);

		fs.writeFileSync(`test/test-macro.js`, macroText, "utf-8");
	}
}

await TestMacroGenerator.pInit();
TestMacroGenerator.run();
